syntax = "proto3";

package ga4gh;

import "ga4gh/pipeline_metadata.proto";
import "ga4gh/common.proto";
import "google/api/annotations.proto";


service PipelineMetadataService {

    // ======================================================
    // Gets a list of Extractions accessible through the API.
    // ======================================================
    // `POST /extractions/search` must accept a JSON version of
    // `SearchExtractionsRequest` as the post body and will return a JSON version
    // of `SearchExtractionsResponse`.
    rpc SearchExtractions(SearchExtractionsRequest)
        returns (SearchExtractionsResponse) {
            option (google.api.http) = {
                post: "/v0.6.0a10/extractions/search"
                body: "*"
            };
        };

    // ==============================================================
    // Gets a list of Sequencing metadata accessible through the API.
    // ==============================================================
    // `POST /sequencing/search` must accept a JSON version of
    // `SearchSequencingRequest` as the post body and will return a JSON version
    // of `SearchSequencingResponse`.
    rpc SearchSequencing(SearchSequencingRequest)
        returns (SearchSequencingResponse) {
            option (google.api.http) = {
                post: "/v0.6.0a10/sequencing/search"
                body: "*"
            };
        };

    // ======================================================
    // Gets a list of Alignments accessible through the API.
    // ======================================================
    // `POST /alignments/search` must accept a JSON version of
    // `SearchAlignmentsRequest` as the post body and will return a JSON version
    // of `SearchAlignmentsResponse`.
    rpc SearchAlignments(SearchAlignmentsRequest)
        returns (SearchAlignmentsResponse) {
            option (google.api.http) = {
                post: "/v0.6.0a10/alignments/search"
                body: "*"
            };
        };

    // ==================================================================
    // Gets a list of VariantCalling metadata accessible through the API.
    // ==================================================================
    // `POST /variantcalling/search` must accept a JSON version of
    // `SearchVariantCallingRequest` as the post body and will return a JSON version
    // of `SearchVariantCallingResponse`.
    rpc SearchVariantCalling(SearchVariantCallingRequest)
        returns (SearchVariantCallingResponse) {
            option (google.api.http) = {
                post: "/v0.6.0a10/variantcalling/search"
                body: "*"
            };
        };

    // ======================================================
    // Gets a list of FusionSVDetections accessible through the API.
    // ======================================================
    // `POST /fusionsvdetections/search` must accept a JSON version of
    // `SearchFusionSVDetectionsRequest` as the post body and will return a JSON version
    // of `SearchFusionSVDetectionsResponse`.
    rpc SearchFusionSVDetections(SearchFusionSVDetectionsRequest)
        returns (SearchFusionSVDetectionsResponse) {
            option (google.api.http) = {
                post: "/v0.6.0a10/fusionsvdetections/search"
                body: "*"
            };
        };

    // ======================================================================
    // Gets a list of ExpressionAnalysis metadata accessible through the API.
    // ======================================================================
    // `POST /expressionanalysis/search` must accept a JSON version of
    // `SearchExpressionAnalysisRequest` as the post body and will return a JSON version
    // of `SearchExpressionAnalysisResponse`.
    rpc SearchExpressionAnalysis(SearchExpressionAnalysisRequest)
        returns (SearchExpressionAnalysisResponse) {
            option (google.api.http) = {
                post: "/v0.6.0a10/expressionanalysis/search"
                body: "*"
            };
        };

    // ======================================================
    // Gets `Extraction` by ID.
    // ======================================================
    // `GET /extractions/{id}` will return a JSON version of `Extraction`.
    rpc GetExtraction(GetExtractionRequest)
        returns (Extraction) {
            option (google.api.http) = {
                get: "/v0.6.0a10/extractions/{extraction_id}"
            };
        };

    // ======================================================
    // Gets `Sequencing` by ID.
    // ======================================================
    // `GET /sequencing/{id}` will return a JSON version of `Sequencing`.
    rpc GetSequencing(GetSequencingRequest)
        returns (Sequencing) {
            option (google.api.http) = {
                get: "/v0.6.0a10/sequencing/{sequencing_id}"
            };
        };

    // ======================================================
    // Gets `Alignment` by ID.
    // ======================================================
    // `GET /alignments/{id}` will return a JSON version of `Alignment`.
    rpc GetAlignment(GetAlignmentRequest)
        returns (Alignment) {
            option (google.api.http) = {
                get: "/v0.6.0a10/alignments/{alignment_id}"
            };
        };

    // ======================================================
    // Gets `VariantCalling` by ID.
    // ======================================================
    // `GET /variantcalling/{id}` will return a JSON version of `VariantCalling`.
    rpc GetVariantCalling(GetVariantCallingRequest)
        returns (VariantCalling) {
            option (google.api.http) = {
                get: "/v0.6.0a10/variantcalling/{variantcalling_id}"
            };
        };

    // ======================================================
    // Gets `FusionSVDetection` by ID.
    // ======================================================
    // `GET /fusionsvdetection/{id}` will return a JSON version of `FusionSVDetection`.
    rpc GetFusionSVDetection(GetFusionSVDetectionRequest)
        returns (FusionSVDetection) {
            option (google.api.http) = {
                get: "/v0.6.0a10/fusionsvdetection/{fusionsvdetection_id}"
            };
        };

    // ======================================================
    // Gets `ExpressionAnalysis` by ID.
    // ======================================================
    // `GET /expressionanalysis/{id}` will return a JSON version of `ExpressionAnalysis`.
    rpc GetExpressionAnalysis(GetExpressionAnalysisRequest)
        returns (ExpressionAnalysis) {
            option (google.api.http) = {
                get: "/v0.6.0a10/expressionanalysis/{expressionanalysis_id}"
            };
        };
}

// ======================================================
// Extraction
// ======================================================
// This request maps to the body of `POST /extractions/search` as JSON.
message SearchExtractionsRequest {
    // Optionally specify the dataset to search within.
    string dataset_id = 1;

    // Returns Extractions with the given name found by case-sensitive string matching.
    string name = 2;

    // Specifies the maximum number of results to return in a single page.
    // If unspecified, a system default will be used.
    int32 page_size = 3;

    // The continuation token, which is used to page through large result sets.
    // To get the next page of results, set this parameter to the value of
    // `nextPageToken` from the previous response.
    string page_token = 4;

    // Optionally specify the sample to search within.
    string sample_id = 5;
    }

// This request maps to the URL `GET /extractions/{extraction_id}`.
message GetExtractionRequest {
    // The ID of the patient requested
    string extraction_id = 1;
    }

//This is the response from `POST /extractions/search` expressed as JSON.
message SearchExtractionsResponse {
    // The list of extractions.
    repeated Extraction extractions = 1;

    // The continuation token, which is used to page through large result sets.
    // Provide this value in a subsequent request to return the next page of
    // results. This field will be empty if there aren't any additional results.
    string next_page_token = 2;
    }

// ======================================================
// Sequencing
// ======================================================
// This request maps to the body of `POST /sequencing/search` as JSON.
message SearchSequencingRequest {
    // Optionally specify the dataset to search within.
    string dataset_id = 1;

    // Returns Sequencing with the given name found by case-sensitive string matching.
    string name = 2;

    // Option to filter for a sample id
    string sample_id = 3;

    // Specifies the maximum number of results to return in a single page.
    // If unspecified, a system default will be used.
    int32 page_size = 4;

    // The continuation token, which is used to page through large result sets.
    // To get the next page of results, set this parameter to the value of
    // `nextPageToken` from the previous response.
    string page_token = 5;
    }

// This request maps to the URL `GET /sequencing/{sequencing_id}`.
message GetSequencingRequest {
    // The ID of the sequencing requested
    string sequencing_id = 1;
    }

//This is the response from `POST /sequencing/search` expressed as JSON.
message SearchSequencingResponse {
    // The list of sequencing metadata.
    repeated Sequencing sequencing = 1;

    // The continuation token, which is used to page through large result sets.
    // Provide this value in a subsequent request to return the next page of
    // results. This field will be empty if there aren't any additional results.
    string next_page_token = 2;
    }

// ======================================================
// Alignment
// ======================================================
// This request maps to the body of `POST /alignments/search` as JSON.
message SearchAlignmentsRequest {
    // Optionally specify the dataset to search within.
    string dataset_id = 1;

    // Returns Alignments with the given name found by case-sensitive string matching.
    string name = 2;

    // Option to filter for a sample id
    string sample_id = 3;

    // Specifies the maximum number of results to return in a single page.
    // If unspecified, a system default will be used.
    int32 page_size = 4;

    // The continuation token, which is used to page through large result sets.
    // To get the next page of results, set this parameter to the value of
    // `nextPageToken` from the previous response.
    string page_token = 5;
    }

// This request maps to the URL `GET /alignments/{alignmnet_id}`.
message GetAlignmentRequest {
    // The ID of the alignment requested
    string alignment_id = 1;
    }

//This is the response from `POST /alignments/search` expressed as JSON.
message SearchAlignmentsResponse {
    // The list of alignments.
    repeated Alignment alignments = 1;

    // The continuation token, which is used to page through large result sets.
    // Provide this value in a subsequent request to return the next page of
    // results. This field will be empty if there aren't any additional results.
    string next_page_token = 2;
    }

// ======================================================
// VariantCalling
// ======================================================
// This request maps to the body of `POST /variantcalling/search` as JSON.
message SearchVariantCallingRequest {
    // Optionally specify the dataset to search within.
    string dataset_id = 1;

    // Returns VariantCalling with the given name found by case-sensitive string matching.
    string name = 2;

    // Option to filter for a sample id
    string sample_id = 3;

    // Specifies the maximum number of results to return in a single page.
    // If unspecified, a system default will be used.
    int32 page_size = 4;

    // The continuation token, which is used to page through large result sets.
    // To get the next page of results, set this parameter to the value of
    // `nextPageToken` from the previous response.
    string page_token = 5;
    }

// This request maps to the URL `GET /variantcalling/{variantcalling_id}`.
message GetVariantCallingRequest {
    // The ID of the variant calling requested
    string variantcalling_id = 1;
    }

//This is the response from `POST /variantcalling/search` expressed as JSON.
message SearchVariantCallingResponse {
    // The list of variant calling metadata.
    repeated VariantCalling variantcalling = 1;

    // The continuation token, which is used to page through large result sets.
    // Provide this value in a subsequent request to return the next page of
    // results. This field will be empty if there aren't any additional results.
    string next_page_token = 2;
    }

// ======================================================
// FusionSVDetection
// ======================================================
// This request maps to the body of `POST /fusionsvdetection/search` as JSON.
message SearchFusionSVDetectionRequest {
    // Optionally specify the dataset to search within.
    string dataset_id = 1;

    // Returns FusionSVDetection with the given name found by case-sensitive string matching.
    string name = 2;

    // Option to filter for a sample id
    string sample_id = 3;

    // Specifies the maximum number of results to return in a single page.
    // If unspecified, a system default will be used.
    int32 page_size = 4;

    // The continuation token, which is used to page through large result sets.
    // To get the next page of results, set this parameter to the value of
    // `nextPageToken` from the previous response.
    string page_token = 5;
    }

// This request maps to the URL `GET /fusionsvdetection/{fusionsvdetection_id}`.
message GetFusionSVDetectionRequest {
    // The ID of the fusion/sv detection requested
    string fusionsvdetection_id = 1;
    }

//This is the response from `POST /fusionsvdetection/search` expressed as JSON.
message SearchFusionSVDetectionResponse {
    // The list of fusion/sv detections.
    repeated FusionSVDetection fusionsvdetection = 1;

    // The continuation token, which is used to page through large result sets.
    // Provide this value in a subsequent request to return the next page of
    // results. This field will be empty if there aren't any additional results.
    string next_page_token = 2;
    }

// ======================================================
// ExpressionAnalysis
// ======================================================
// This request maps to the body of `POST /expressionanalysis/search` as JSON.
message SearchExpressionAnalysisRequest {
    // Optionally specify the dataset to search within.
    string dataset_id = 1;

    // Returns Treatments with the given name found by case-sensitive string matching.
    string name = 2;

    // Option to filter for a sample id
    string sample_id = 3;

    // Specifies the maximum number of results to return in a single page.
    // If unspecified, a system default will be used.
    int32 page_size = 4;

    // The continuation token, which is used to page through large result sets.
    // To get the next page of results, set this parameter to the value of
    // `nextPageToken` from the previous response.
    string page_token = 5;
    }

// This request maps to the URL `GET /expressionanalysis/{expressionanalysis_id}`.
message GetExpressionAnalysisRequest {
    // The ID of the expressionanalysis requested
    string expressionanalysis_id = 1;
    }

//This is the response from `POST /expressionanalysis/search` expressed as JSON.
message SearchExpressionAnalysisResponse {
    // The list of expression analysis.
    repeated ExpressionAnalysis expressionanalysis = 1;

    // The continuation token, which is used to page through large result sets.
    // Provide this value in a subsequent request to return the next page of
    // results. This field will be empty if there aren't any additional results.
    string next_page_token = 2;
    }
